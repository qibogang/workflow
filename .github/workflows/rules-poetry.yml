name: Rules

on:
  workflow_call:
    inputs:
      os:
        description: 'Used operation system'
        required: true
        type: string
      python-version:
        description: 'Used Python version'
        required: true
        type: string
      poetry-extras:
        description: 'Poetry extra flags'
        required: false
        type: string
        default: ""
      doctests:
        description: 'Enable examples' test'
        required: false
        type: boolean
        default: false
    secrets:
      codecov_token:
        required: false

jobs:
  build:
    runs-on: ${{ inputs.os }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install and configure poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install project
        run: poetry install --no-interaction ${{ inputs.poetry-extras }}
      - name: Install task runner
        run: pip install poethepoet
      - name: Lint
        run: |
          source $VENV
          poe lint
          poe lint-warnings
      - name: Test
        run: |
          source $VENV
          poe test
      - name: Test documentation examples
        if: ${{ inputs.doctests }}
        run: |
          source $VENV
          make -C doc doctest
      - name: Upload coverage to Codecov
        if: startsWith(runner.os, 'Linux')
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml
          flags: unittests
          name: unit-tests
          fail_ci_if_error: true
          token: ${{ secrets.codecov_token }}

name: Deploy Sphinx documentation

on:

  workflow_call:
    inputs:
        python-version:
          required: true
          type: string
        package-manager:
          required: true 
          type: string
        dependency-path:
          required: true 
          type: string
        docs-folder:
          required: true 
          type: string  
        url:
          required: false
          type: string
          default: https://qibo.science/
        trigger-label:
          required: false
          type: string
          default: none
        path-doc:
          required: false
          type: string 
          default: ./doc



# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  check-label:
    runs-on: ubuntu-latest
    steps:
      - name: checks for the label 
        id: valid_label
        run: |
          if [[ "${{ inputs.trigger-label }}" != "latest" ]] && [[ "${{ inputs.trigger-label  }}" != "stable" ]];
            then
                exit 1 
          fi
            
  # TODO: this job should have a own reusable workflow
  build:
    
    runs-on: ubuntu-latest
    needs: check-label
    uses: ./.github/workflows/build-docs.yml 
    with:
      python-version: ${{ inputs.python-version }}
      package-manager: ${{ inputs.package-manager }}
      dependency-path: ${{ inputs.dependency-path }}
      
    
  new-artifact:
    needs: [build, check-label]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 
    - name: generate the ${{inputs.trigger-label}} documentation 
      run: |
        label=${{inputs.trigger-label}}
        mkdir new_docs
        cd new_docs
        mkdir $label
    - uses: actions/download-artifact@v3
      with:
        name: documentation
        path: new_docs/${{inputs.trigger-label}} 
    - name: generate the remaning documentation
      run: | 
        label=${{inputs.trigger-label}} 
        cd new_docs
        if [[ ${label} == "latest" ]]; 
          then 
            missing_doc="stable"
          else
            missing_doc="latest"
        fi
        URL="${{ inputs.url }}/${{ inputs.docs-folder }}/${missing_doc}.tar.gz"
        # Check if it is possible to connect to the website 
        if wget "${URL}"; then  
            tar -xf "${missing_doc}.tar.gz"
        else
          # Otherwise it copies the existing docs
            cp -a "${label}"/. "${missing_doc}"
        fi
    - name: generate the *.tar.gz 
      run: |
        cd new_docs 
        tar -czvf latest.tar.gz ./latest
        tar -czvf stable.tar.gz ./stable 
    # TODO: use the matrix of versions we want to implement 
    - name: Upload latest artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: new_docs
    
  # Deployment job
  # TODO: use the matrix of versions we want to implement 
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url}}
    runs-on: ubuntu-latest
    needs: [new-artifact, check-label]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
       
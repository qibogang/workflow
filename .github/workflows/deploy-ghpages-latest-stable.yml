name: Deploy Sphinx documentation

on:

  workflow_call:
    inputs:
        python-version:
          required: true
          type: string
        package-manager:
          required: true 
          type: string
        dependency-path:
          required: true 
          type: string
        trigger-label:
          required: false
          type: string
          default: none
        path-doc:
          required: false
          type: string 
          default: ./doc

        
          
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  
  build:
    
    runs-on: ubuntu-latest

    
    steps:
      
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
        if: ${{ inputs.package-manager == 'poetry' }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache: ${{ inputs.package-manager }}
          cache-dependency-path: ${{ inputs.dependency-path }} 
      - name: Install dependencies with pip
        run: |
          ${{ inputs.package-manager }} install .[docs]
          # required by nbsphinx
          # https://nbsphinx.readthedocs.io/en/0.2.15/installation.html#pandoc
          sudo apt install pandoc
        if : ${{ inputs.package-manager == 'pip' }}
      - name: Install dependencies and compile the documentation with poetry
        run: |
          poetry install --no-interaction ${{ inputs.poetry-extras }}
          pip install poethepoet
          poe docs
        if: ${{ inputs.package-manager == 'poetry' }}
      - name: Compile documentation
        working-directory: ${{ inputs.path-doc }}
        run: |
          make html
        if : ${{ inputs.package-manager == 'pip' }} 
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: documentation
          path: ${{ inputs.path-doc }}/build/html
  
  # TODO: this job should have a own reusable workflow
  new-artifact:
    needs: [build]
    if: ${{ ( inputs.trigger-label == 'latest' ) || ( inputs.trigger-label == 'stable' ) }} 
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 
    - name: generate the ${{inputs.trigger-label}} documentation 
      run: |
        label=${{inputs.trigger-label}}
        mkdir new_docs
        cd new_docs
        mkdir $label
    - uses: actions/download-artifact@v3
      with:
        name: documentation
        path: new_docs/${{inputs.trigger-label}} 
    - name: generate the remaning documentation
      run: | 
        label=${{inputs.trigger-label}} 
        cd new_docs
        if [[ ${label} == "latest" ]]; 
          then 
            missing_doc="stable"
          else
            missing_doc="latest"
        fi
        URL="https://qibogang.github.io/qibo/${missing_doc}/${missing_doc}"
        mkdir "$missing_doc"
        # Check if it is possible to connect to the website 
        # Otherwise it copies the existing docs
        if wget --spider "${URL}" 2>/dev/null; then 
            wget "$URL"  
            tar -xf "${missing_doc}.tar" -C "${missing_doc}/"
        else
            cp -a "${label}"/. "${missing_doc}"
        fi 
    # TODO: use the matrix of versions we want to implement 
    - name: Upload latest artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: new_docs
    
  # Deployment job
  # TODO: use the matrix of versions we want to implement 
  deploy-stable:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url}}
    runs-on: ubuntu-latest
    needs: new-artifact
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
       